{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","renderQuoteList","handleShow","bind","handleGo","window","open","this","setState","className","onClick","Component","randomQuote","data","Math","floor","random","length","Quote","quote","processedData","handleChange","author","href","target","rel","QuoteList","map","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"g8SAMMA,E,kDACJ,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXC,iBAAkB,GAEpB,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBAClB,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBANA,E,uDAUhBE,OAAOC,KAAK,6CAA6C,Y,mCAIzDC,KAAKC,SAAS,CACZP,iBAAmBM,KAAKP,MAAMC,oB,+BAKhC,OACE,yBAAKQ,UAAU,OACb,yBAAKA,UAAU,mBACf,4BAAQA,UAAU,YAAYC,QAASH,KAAKL,YACzCK,KAAKP,MAAMC,gBAAkB,qBAAuB,mBAEvD,4BAAQQ,UAAU,YAClBC,QAASH,KAAKH,UADd,eAGCG,KAAKP,MAAMC,gBAAkB,kBAAC,EAAD,MAAgB,kBAAC,EAAD,W,GA9BpCU,aAoCZC,EAAc,SAACC,GAEnB,OAAOA,EAAKC,KAAKC,MAAMD,KAAKE,SAAWH,EAAKI,UAIxCC,E,kDACJ,WAAYnB,GAAQ,IAAD,8BACjB,cAAMA,IAEDC,MAAQ,CACXmB,MAAQP,EAAYQ,IAEtB,EAAKC,aAAe,EAAKA,aAAalB,KAAlB,gBANH,E,2DAWjBI,KAAKC,SAAS,CACZW,MAAQP,EAAYQ,O,+BAMtB,OACA,yBAAKX,UAAU,SAEb,wBAAIA,UAAU,QAAd,YAA4BF,KAAKP,MAAMmB,MAAMA,MAA7C,OACA,wBAAIV,UAAU,QAASF,KAAKP,MAAMmB,MAAMG,QACxC,yBAAKb,UAAU,QACb,4BAAQA,UAAU,eAAc,uBAAGc,KAAI,iDAA4ChB,KAAKP,MAAMmB,MAAMA,MAA7D,eAAyEZ,KAAKP,MAAMmB,MAAMG,QAAUE,OAAO,SAASC,IAAI,uBAA/H,UAChC,4BAAQhB,UAAU,WAAWC,QAASH,KAAKc,cAA3C,c,GA1BYV,aAgCde,E,kDACJ,WAAY3B,GAAO,uCACXA,G,qDAIN,OACE,yBAAKU,UAAU,cACb,+BACE,4BACE,qCACA,uCAEDW,EAAcO,KAAI,SAAAR,GACjB,OACG,4BACC,4BAAKA,EAAMA,OACX,4BAAKA,EAAMG,kB,GAjBHX,aA4BTb,IChGK8B,QACW,cAA7BvB,OAAOwB,SAASC,UAEe,UAA7BzB,OAAOwB,SAASC,UAEhBzB,OAAOwB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7e470a0f.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './App.css';\r\nimport processedData from \"./quotes/quotes-processed.json\"\r\n\r\n\r\n\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      renderQuoteList : false\r\n    }\r\n    this.handleShow = this.handleShow.bind(this)\r\n    this.handleGo = this.handleGo.bind(this)\r\n  }\r\n\r\n  handleGo(){\r\n    window.open('https://github.com/GrandThed/quote-machine','_blank')\r\n  }\r\n\r\n  handleShow(){\r\n    this.setState({\r\n      renderQuoteList : !this.state.renderQuoteList\r\n    })\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"btns extra-btns\">\r\n        <button className=\"extra-btn\" onClick={this.handleShow}>\r\n          {this.state.renderQuoteList ? \"Show Randome Quote\" : \"Show all quotes\"}\r\n          </button>\r\n        <button className=\"extra-btn\" \r\n        onClick={this.handleGo}>Go to repo</button>\r\n      </div>\r\n        {this.state.renderQuoteList ? <QuoteList /> : <Quote/>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst randomQuote = (data) => {\r\n  // const processedData = await parseJson(readJson)\r\n  return data[Math.floor(Math.random() * data.length)]\r\n}\r\n\r\n\r\nclass Quote extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      quote : randomQuote(processedData)\r\n    }\r\n    this.handleChange = this.handleChange.bind(this)\r\n  }\r\n  \r\n\r\n  handleChange() {\r\n    this.setState({\r\n      quote : randomQuote(processedData)\r\n    })\r\n  }\r\n  \r\n\r\n  render(){\r\n    return(\r\n    <div className=\"quote\">\r\n      \r\n      <h1 className=\"text\" >{`\" ${this.state.quote.quote} \"`}</h1>\r\n      <h3 className=\"text\" >{this.state.quote.author}</h3>\r\n      <div className=\"btns\" >\r\n        <button className=\"btn-twitter\"><a href={`https://twitter.com/intent/tweet?text=\"${this.state.quote.quote}\"%0A${this.state.quote.author}`} target=\"_blank\" rel=\"noopener noreferrer\">tweet</a></button>\r\n        <button className=\"btn-next\" onClick={this.handleChange}>Next</button>\r\n      </div>\r\n    </div>)\r\n  }\r\n}\r\n\r\nclass QuoteList extends Component {\r\n  constructor(props){\r\n    super(props)\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div className=\"quote-list\">\r\n        <table>\r\n          <tr>\r\n            <th>Quote</th>\r\n            <th>Author</th>\r\n          </tr>\r\n          {processedData.map(quote => {\r\n            return(\r\n               <tr>\r\n                <th>{quote.quote}</th>\r\n                <th>{quote.author}</th>\r\n              </tr>)\r\n          })}\r\n        </table>\r\n      </div>\r\n    )\r\n\r\n  }\r\n  \r\n}\r\n\r\nexport default App;\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}